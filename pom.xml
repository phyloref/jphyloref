<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.phyloref</groupId>
    <artifactId>jphyloref</artifactId>
    <version>1.2.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>JPhyloRef</name>
    <description>A tool for testing and resolving phyloreferences as OWL ontologies.</description>
    <url>https://github.com/phyloref/jphyloref</url>

    <scm>
        <connection>scm:git:git://github.com/phyloref/jphyloref.git</connection>
        <developerConnection>scm:git:ssh://github.com:phyloref/jphyloref.git</developerConnection>
        <url>http://github.com/phyloref/jphyloref/</url>
    </scm>

    <licenses>
        <license>
            <name>MIT License</name>
            <url>http://www.opensource.org/licenses/mit-license.php</url>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Gaurav Vaidya</name>
            <email>gaurav@ggvaidya.com</email>
            <organization>Renaissance Computing Institute, University of North Carolina</organization>
            <organizationUrl>https://renci.org/</organizationUrl>
        </developer>
    </developers>

    <properties>
        <mainClass>org.phyloref.jphyloref.JPhyloRef</mainClass>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <distributionManagement>
        <snapshotRepository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
        <repository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
        </repository>
    </distributionManagement>

    <dependencies>
        <!-- For processing command line arguments -->
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>1.6.0</version>
        </dependency>

        <!-- For producing testing output -->
        <dependency>
            <groupId>org.tap4j</groupId>
            <artifactId>tap4j</artifactId>
            <version>4.4.2</version>
        </dependency>

        <!-- For creating a webserver -->
        <dependency>
            <groupId>org.nanohttpd</groupId>
            <artifactId>nanohttpd</artifactId>
            <version>2.3.1</version>
        </dependency>

        <!-- For writing JSON -->
        <!-- https://mvnrepository.com/artifact/org.json/json -->
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20240303</version>
        </dependency>

        <!-- For reading and writing JSON-LD -->
        <!-- https://mvnrepository.com/artifact/org.eclipse.rdf4j/rdf4j-rio-jsonld -->
        <dependency>
            <groupId>org.eclipse.rdf4j</groupId>
            <artifactId>rdf4j-rio-jsonld</artifactId>
            <version>5.0.0-M2</version>
            <scope>runtime</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.eclipse.rdf4j/rdf4j-rio-api -->
        <dependency>
            <groupId>org.eclipse.rdf4j</groupId>
            <artifactId>rdf4j-rio-api</artifactId>
            <version>5.0.0-M2</version>
        </dependency>

        <!-- REASONERS -->

        <!-- Elk is an OWL 2 EL reasoner -->
        <!-- https://mvnrepository.com/artifact/org.semanticweb.elk/elk-owlapi -->
        <dependency>
            <groupId>org.semanticweb.elk</groupId>
            <artifactId>elk-owlapi</artifactId>
            <version>0.4.3</version>
        </dependency>

        <!-- To access OWL-API -->
        <!-- https://mvnrepository.com/artifact/net.sourceforge.owlapi/owlapi-apibinding -->
        <dependency>
            <groupId>net.sourceforge.owlapi</groupId>
            <artifactId>owlapi-apibinding</artifactId>
            <version>5.5.0</version>
        </dependency>

        <!-- To support JSON-LD input -->
        <!-- https://mvnrepository.com/artifact/org.openrdf/openrdf-model -->
        <dependency>
            <groupId>org.openrdf</groupId>
            <artifactId>openrdf-model</artifactId>
            <version>1.2.7</version>
        </dependency>


        <!-- Adds a StaticLoggerBinder for logging (as per phyloref/jphyloref#18) -->
        <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-simple -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>2.1.0-alpha1</version>
        </dependency>

        <!-- We use JUnit Jupiter Engine for testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.10.2</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <!-- We use Surefire to run testing using JUnit Jupiter Engine -->
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-surefire-plugin</artifactId>
              <version>2.22.1</version>
              <configuration>
              </configuration>
            </plugin>

            <!-- Use Spotless to check and fix style: https://github.com/diffplug/spotless/tree/master/plugin-maven -->
            <plugin>
              <groupId>com.diffplug.spotless</groupId>
              <artifactId>spotless-maven-plugin</artifactId>
              <version>1.15.0</version>
              <configuration>
                <java>
                  <googleJavaFormat>
                    <version>1.6</version>
                    <style>GOOGLE</style>
                  </googleJavaFormat>
                  <removeUnusedImports/>
                </java>

                <formats>
                  <!-- Clean up indentation in XML, Markdown and JSON files in this project. -->
                  <format>
                    <includes>
                      <include>**/*.xml</include>
                      <include>**/*.md</include>
                      <include>**/*.json</include>
                    </includes>
                    <excludes>
          <exclude>.idea/**</exclude>
                      <exclude>target/**</exclude>
                      <exclude>dependency-reduced-pom.xml</exclude>
                    </excludes>

                    <trimTrailingWhitespace/>
                    <endWithNewline/>
                    <indent>
                      <spaces>true</spaces>
                      <spacesPerTab>2</spacesPerTab>
                    </indent>
                  </format>
                </formats>
              </configuration>
              <executions>
                <execution>
                  <id>test</id>
                  <phase>test</phase>
                  <goals>
                    <goal>check</goal>
                  </goals>
                </execution>
              </executions>
            </plugin>

      <!--
        The jacoco-maven-plugin uses Jacoco to measure test coverage
        https://www.eclemma.org/jacoco/trunk/doc/maven.html
      -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.6</version>
        <configuration>
          <!-- These rules are to ensure that CI output records that we still
          haven't finished testing this code, which is why we don't halt on failure. -->
          <haltOnFailure>false</haltOnFailure>
          <rules>
            <rule implementation="org.jacoco.maven.RuleConfiguration">
              <element>SOURCEFILE</element>
              <limits>
                <limit implementation="org.jacoco.report.check.Limit">
                  <counter>INSTRUCTION</counter>
                  <value>COVEREDRATIO</value>
                  <minimum>0.04</minimum>
                </limit>
                <limit implementation="org.jacoco.report.check.Limit">
                  <counter>BRANCH</counter>
                  <value>COVEREDRATIO</value>
                  <minimum>0.00</minimum>
                </limit>
                <limit implementation="org.jacoco.report.check.Limit">
                  <counter>CLASS</counter>
                  <value>MISSEDCOUNT</value>
                  <maximum>1</maximum>
                </limit>
              </limits>
            </rule>
          </rules>
        </configuration>
        <executions>
          <execution>
            <id>prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>check</id>
            <phase>test</phase>
            <goals>
              <goal>check</goal>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

            <!-- maven-compiler-plugin allows us to configure compilations errors -->
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-compiler-plugin</artifactId>
              <version>3.8.0</version>
              <configuration>
                <compilerArgument>-Xlint:unchecked</compilerArgument>
                <showDeprecation>true</showDeprecation>
              </configuration>
            </plugin>

            <!-- Recreate JAR file on every run -->
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.2.0</version>
        <configuration>
                <forceCreation>true</forceCreation>
        </configuration>
      </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <transformers>
                        <transformer
                            implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <manifestEntries>
                                <Main-Class>${mainClass}</Main-Class>
                                <X-Compile-Source-JDK>${maven.compile.source}</X-Compile-Source-JDK>
                                <X-Compile-Target-JDK>${maven.compile.target}</X-Compile-Target-JDK>
                            </manifestEntries>
                        </transformer>
                    </transformers>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- We publish to Sonatype OSSRH -->
            <plugin>
                <groupId>org.sonatype.plugins</groupId>
                <artifactId>nexus-staging-maven-plugin</artifactId>
                <version>1.6.8</version>
                <extensions>true</extensions>
                <configuration>
                    <serverId>ossrh</serverId>
                    <nexusUrl>https://oss.sonatype.org/</nexusUrl>
                    <autoReleaseAfterClose>true</autoReleaseAfterClose>
                </configuration>
            </plugin>

            <!-- We need to create source JARs for deployment -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- We need to create Javadoc JARs for deployment -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- We need to sign our plugins for deployment -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-gpg-plugin</artifactId>
                <version>1.6</version>
                <executions>
                    <execution>
                        <id>sign-artifacts</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>sign</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
